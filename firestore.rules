rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- ROBUST HELPER FUNCTIONS ---
    // These check roles directly from Firestore, avoiding errors if custom tokens are stale or not yet present.
    function isUserAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isUserViewer() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'viewer' || isUserAdmin());
    }
    // ----------------------------

    match /users/{userId} {
      // FIX #1: Allows an admin to get the list of all users for the Admin Panel.
      allow list: if isUserAdmin() || request.auth != null;
      // FIX #2: Allows any newly authenticated user to CREATE their own user document.
      allow create: if request.auth.uid == userId;
      // Allow users to read their own doc, and admins to read any.
      allow read: if request.auth.uid == userId ||
      isUserAdmin();

      // Only admins can update roles or delete users.
      allow update, delete: if isUserAdmin();

      // NEW FIX: Allow user to read/write their own chat history subcollection
      match /chat/{chatId} {
          allow read, write: if request.auth.uid == userId;
      }
    }

    // --- RESTORED RULES FOR OTHER COLLECTIONS USING ROBUST FUNCTIONS ---
    match /contacts/{contactId} {
      allow read: if isUserViewer();
      allow write: if isUserAdmin();
    }

    match /books/{bookId} {
        allow read: if isUserViewer();
        allow write: if isUserAdmin();
    }

    // Using your more permissive rule for transactions
    match /transactions/{transactionId} {
        allow read: if isUserViewer();
        allow create, update, delete: if isUserAdmin();
    }

    match /events/{eventId} {
        allow read: if isUserViewer();
        allow write: if isUserAdmin();
    }
    
    match /chatHistory/{chatId} {
      allow read, write: if request.auth != null;
    }
  }
}